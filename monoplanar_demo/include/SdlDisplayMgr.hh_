#ifndef SDLDISPLAYMGR_HH
#define SDLDISPLAYMGR_HH

#include <SDL2/SDL_video.h>     // SDL_Window
#include <SDL2/SDL_render.h>    // SDL_Renderer SDL_Texture
#include <SDL2/SDL_surface.h>
#include <SDL2/SDL_ttf.h>       // TTF_Font

#include "DisplayMgr.hh"
#include "Settings.hh"
#include "DdaRaycastEngine.hh"  // FovRay
#include "KbdInputMgr.hh"

#include <cstdint>

#include <memory>               // unique_ptr
#include <vector>


namespace SdlDeleter {

struct Window {
    void operator()(SDL_Window* wp) const { SDL_DestroyWindow(wp); }
};

struct Renderer {
    void operator()(SDL_Renderer* rp) const { SDL_DestroyRenderer(rp); }
};

struct Surface {
    void operator()(SDL_Surface* sp) const { SDL_FreeSurface(sp); }
};

struct Texture {
    void operator()(SDL_Texture* tp) const { SDL_DestroyTexture(tp); }
};

struct TtfFont {
    void operator()(TTF_Font* fp) const { TTF_CloseFont(fp); }
};

}  // namespace SdlDeleter

class SdlDisplayMgr : public DisplayMgr {
private:
    // TBD: SDL_Get/MapRGB(A) assume casting pixels pointer to uint32_t,
    //   regardless of bytes per pixel, but the wiki also mentions different
    //   data types for pixels, see: https://wiki.libsdl.org/SDL2/SDL_PixelFormat .
    // uint8_t __rgb_tuple[3];
    // // mirrors SDL pixel casting
    // using Pixel1Byte = uint8_t;
    // using Pixel2Byte = uint16_t;
    // using Pixel3Byte = decltype(__rgb_tuple);
    // using Pixel4Byte = uint32_t;

    // functors for SDL struct pointer deallocations
    const SdlDeleter::Window   window_deleter;
    const SdlDeleter::Renderer renderer_deleter;
    const SdlDeleter::Surface  surface_deleter;
    const SdlDeleter::Texture  texture_deleter;
    const SdlDeleter::TtfFont  ttf_font_deleter;

    using SdlWindowUnqPtr   = std::unique_ptr<SDL_Window,   SdlDeleter::Window>;
    using SdlRendererUnqPtr = std::unique_ptr<SDL_Renderer, SdlDeleter::Renderer>;
    using SdlSurfaceUnqPtr  = std::unique_ptr<SDL_Surface,  SdlDeleter::Surface>;
    using SdlTextureUnqPtr  = std::unique_ptr<SDL_Texture,  SdlDeleter::Texture>;
    using SdlTtfFontUnqPtr  = std::unique_ptr<TTF_Font,     SdlDeleter::TtfFont>;

    // X11 window
    SdlWindowUnqPtr                window    (nullptr, window_deleter);
    // window renderer
    SdlRendererUnqPtr              renderer  (nullptr, renderer_deleter);

    // main surface that is drawn to by game engine
    SdlSurfaceUnqPtr               buffer    (nullptr, surface_deleter);
    // full screen texture created from buffer, to render as video frame
    SdlTextureUnqPtr               buffer_tx (nullptr, texture_deleter);

    // element textures
    //
    // sky plane (maze background when not texturing ceiling and floor)
    SdlTextureUnqPtr               sky_tx    (nullptr, texture_deleter);
    // wall textures (all 256 x 256 px jpegs)
    // surfaces instead of textures so as to get individual pixel data
    // TBD: could be array
    // TBD: make shared_ptrs?
    std::vector<SdlSurfaceUnqPtr>  wall_txs {
        9, SdlSurfaceUnqPtr(nullptr, surface_deleter) };
    // leading "FPS: " in fps HUD
    SdlTextureUnqPtr               fps_tx    (nullptr, texture_deleter);
    // FPS digits
    std::unordered_map<
        uint8_t, SdlTextureUnqPtr> font_cache;

    inline void* surfacePixelPtr(SdlSurfaceUnqPtr sp, const uint16_t screen_x,
                                 const uint16_t screen_y) {
        assert(sp.get() != nullptr && screen_x < sp->w && screen_y < sp->h);
        return sp->pixels[(screen_y * sp->pitch) + screen_x];
    };

    void renderPixelColumn(const uint16_t screen_x, const FovRay& ray);

//protected:
    //uint16_t minimap_w;
    //uint16_t minimap_h;

public:
    void initialize();

    // adjusting to SDL window resize
    void fitToWindow(const double map_proportion);

    // inline void clearDisplay();

    void renderView(const std::vector<FovRay>& fov_rays);

    void renderMap(const DdaRaycastEngine& raycast_engine);

    void renderHUD(const double pt_frame_duration_mvg_avg,
                   const double rt_frame_duration_mvg_avg,
                   const Settings& settings,
                   const DdaRaycastEngine& raycast_engine,
                   const KbdInputMgr* kbd_input_mgr);

    void drawScreen();
};

#endif  // SDLDISPLAYMGR_HH
