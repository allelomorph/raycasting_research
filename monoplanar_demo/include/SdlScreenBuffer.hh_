#ifndef SDLSCREENBUFFER_HH
#define SDLSCREENBUFFER_HH

// note: SDL_Surface allocation and freeing does not require main SDL init
#include <SDL2/SDL_surface.h>  // SDL_Surface SDL_FreeSurface

// struct SDL_Surface {
//     Uint32 flags;               /**< Read-only */
//     SDL_PixelFormat *format;    /**< Read-only */
//     int w, h;                   /**< Read-only */
//     int pitch;                  /**< Read-only */
//     void *pixels;               /**< Read-write */
//
//     /** Application data associated with the surface */
//     void *userdata;             /**< Read-write */
//
//     /** information needed for surfaces requiring locks */
//     int locked;                 /**< Read-only */
//     void *lock_data;            /**< Read-only */
//
//     /** clipping information */
//     SDL_Rect clip_rect;         /**< Read-only */
//
//     /** info for fast blit mapping to other surfaces */
//     struct SDL_BlitMap *map;    /**< Private */
//
//     /** Reference count -- used when freeing surface */
//     int refcount;               /**< Read-mostly */
// };

class SdlScreenBuffer {
private:
    struct SdlSurfaceDeleter {
        void operator()(SDL_Surface* sp) const { SDL_FreeSurface(sp); }
    };
    SdlSurfaceDeleter surface_deleter;

    std::unique_ptr<SDL_Surface, SdlSurfaceDeleter> surface (nullptr, surface_deleter);

public:
    uint16_t w;  // columns
    uint16_t h;  // rows

    // adjusting to SDL window resize
    void resize(const uint16_t _w, const uint16_t _h);

    // get/set pixels
    TtyPixel& pixel(const uint16_t col_i, const uint16_t row_i);
    char&     pixelChar(const uint16_t col_i, const uint16_t row_i);
    uint8_t&  pixelColorCode(const uint16_t col_i, const uint16_t row_i);

    // iterators to rows (when printing buffer to terminal)
    TtyPixel* rowBegin(const uint16_t row_i);
    TtyPixel* rowEnd(const uint16_t row_i);

    // horizontally fills in pixel chars, used to render minimap and HUD
    void pixelCharReplace(const uint16_t col_i, const uint16_t row_i,
                          const char* s, const uint16_t sz);
};


#endif  // TTYSCREENBUFFER_HH
